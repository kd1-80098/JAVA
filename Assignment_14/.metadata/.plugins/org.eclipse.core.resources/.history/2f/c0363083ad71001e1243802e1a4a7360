package Q1;

import java.sql.Connection;
//import java.util.Scanner;    we should not create object of Scanner inside DAO class. also we should not print from DAO class.
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * Core Java @ Sunbeam Karad Sep 2023
 * Author: Nilesh Ghule <nilesh@sunbeaminfo.com>
 * Time: 2023-10-22 13:01
 */

public class CandidateDao implements AutoCloseable {
	private Connection con;
//	Scanner sc=new Scanner(System.in);
	public CandidateDao() throws SQLException {
		con = DbUtil.getConnection();
	}
	@Override
	public void close() {
		try {
			if (con != null)
				con.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	// add new candidate
	public int save(User u)throws SQLException
	{
		
		String sql="insert into candidates values(default,?,?,?)";
		try(PreparedStatement stmt=con.prepareStatement(sql)){
			stmt.setString(1,c.getName());
			stmt.setString(2,c.getParty());
			stmt.setInt(3, c.getVotes()); 
			int cnt=stmt.executeUpdate();
			return cnt;
		}
		
	}
	
	// delete given candidate
	public int deleteById(int id) throws SQLException {
		String sql = "DELETE FROM candidates WHERE id=?";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			stmt.setInt(1, id);
			int cnt = stmt.executeUpdate();
			return cnt;
		} //stmt.close();
	}
	
	
	// update candidate
	//modify name and party for the candidate
	public int updateCandidate(Candidate c)throws SQLException{
		String sql="update candidates set name=? , party=? where id=?";
		try(PreparedStatement stmt=con.prepareStatement(sql)){
			stmt.setString(1,c.getName());
			stmt.setString(2,c.getParty() );
			stmt.setInt(3, c.getId());
			int cnt=stmt.executeUpdate();
			return cnt;
		}
	
			
	}
	
	
	// get all candidates
	public List<Candidate> findAll() throws SQLException {
		List<Candidate> list = new ArrayList<>();
		String sql = "SELECT * FROM candidates";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			try(ResultSet rs = stmt.executeQuery()) {
				while(rs.next()) {
					int id = rs.getInt("id");
					String name = rs.getString("name");
					String party = rs.getString("party");
					int votes = rs.getInt("votes");
					Candidate c = new Candidate(id, name, party, votes);
					list.add(c);
				}
			} // rs.close();
		} // stmt.close();
		return list;
	}
	
	// increment candidate vote
	public int incrementVote(int candidateId) throws SQLException {
		String sql = "UPDATE candidates SET votes=votes+1 WHERE id=?";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			int cnt = stmt.executeUpdate();
			return cnt; 
		} //stmt.close();
	}
	
	// get all candidates of given party
	public List<Candidate> findByParty(String givenParty) throws SQLException {
		List<Candidate> list = new ArrayList<>();
		String sql = "SELECT * FROM candidates WHERE party=?";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			stmt.setString(1, givenParty);
			try(ResultSet rs = stmt.executeQuery()) {
				while(rs.next()) {
					int id = rs.getInt("id");
					String name = rs.getString("name");
					String party = rs.getString("party");
					int votes = rs.getInt("votes");
					Candidate c = new Candidate(id, name, party, votes);
					list.add(c);
				}
			} // rs.close();
		} // stmt.close();
		return list;
	}
	
	// get partywise vote count
	public List<PartyVotes> getPartyWiseVotes() throws SQLException
	{
		List<PartyVotes> list=new ArrayList<>();
		String str="select party,sum(votes) total from candidates group by party";
		try(PreparedStatement stmt=con.prepareStatement(str)){
			try(ResultSet rs=stmt.executeQuery()){
				while(rs.next()) {
					int votes=rs.getInt("total");
					String party=rs.getString("party"); //stores multiple lines of output inside it.
				PartyVotes pv=new PartyVotes(party,votes);
					list.add(pv);
				}
			}
		}
		return list;
		
	}
	
	
	
	
}





